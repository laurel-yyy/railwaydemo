spring.application.name=railway


# mybatis-plus.mapper-locations=classpath*:mapper/**/*.xml  # 配置 MyBatis 映射文件的位置（如果需要）
# mybatis-plus.type-aliases-package=com.example.demo.entity  # 设置实体类所在的包路径
# mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl  # 输出 SQL 日志（可选）

# # MySQL 数据源配置
# spring.datasource.url=jdbc:mysql://localhost:3306/railway?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
# spring.datasource.username=root
# spring.datasource.password=123456
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


# # MySQL 数据源配置
# spring.datasource.url=jdbc:mysql://localhost:3306/railway?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
# spring.datasource.username=root
# spring.datasource.password=12345678
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


spring.shardingsphere.datasource.names=ds0

spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/railway?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

# # 分片规则配置
# spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=ds0.t_user_$->{0..15}  # 定义16个物理表

# # 分表策略
# spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-column=id  # 按 id 进行分片
# spring.shardingsphere.rules.sharding.tables.t_user.table-strategy.standard.sharding-algorithm-name=user_inline

# # 分片算法配置，user_id % 16
# spring.shardingsphere.rules.sharding.sharding-algorithms.user_inline.type=INLINE
# spring.shardingsphere.rules.sharding.sharding-algorithms.user_inline.props.algorithm-expression=t_user_$->{id % 16}  # 按 id % 16 分表

# # 雪花算法
# spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
# spring.shardingsphere.rules.sharding.key-generators.snowflake.props.id=1  # 工作 ID，可以根据实际情况设置

# # 指定分布式主键生成策略
# spring.shardingsphere.rules.sharding.tables.t_user.key-generator-strategy.column=id  # 主键列
# spring.shardingsphere.rules.sharding.tables.t_user.key-generator-strategy.key-generator-name=snowflake  # 使用雪花算法生成主键